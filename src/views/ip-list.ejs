


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>IP Address List</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; margin: 2em; background-color: #f4f6f9; color: #333; }
        h1 { color: #1a202c; }
        #ip-count { font-size: 1.1em; margin-bottom: 1em; background-color: #e2e8f0; padding: 10px; border-radius: 8px; }
        table { width: 100%; border-collapse: collapse; background-color: #fff; box-shadow: 0 2px 4px rgba(0,0,0,0.1); border-radius: 8px; overflow: hidden; }
        th, td { border-bottom: 1px solid #e2e8f0; padding: 12px 15px; text-align: left; white-space: nowrap; }
        th { background-color: #edf2f7; font-weight: 600; }
        tr:nth-child(even) { background-color: #f7fafc; }
        tr:hover { background-color: #f1f5f9; }
        #loader { text-align: center; padding: 20px; font-size: 1.2em; display: none; }
        .status-active { color: #2f855a; font-weight: bold; }
        .status-inactive { color: #c53030; }
        #search-input {
            width: 100%;
            padding: 10px;
            margin: 10px 0;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            font-size: 1em;
        }
        .highlight {
            background-color: yellow;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <h1>Monitored IP Addresses</h1>
     <div id="ip-count">
        Showing <strong id="currently-showing"><%= ips.length %></strong> of <strong id="total-ips"><%= totalIps %></strong> IPs
    </div>


    <!-- Search input -->
    <input type="text" id="search-input" placeholder="Search by IP address" />

    <table id="ip-table">
        <thead>
            <tr>
                <th>IP Address</th>
                <th>First Seen (UTC)</th>
                <th>Last Seen (UTC)</th>
                <th>Age</th>
                <th>Last Active</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody id="ip-table-body">
            <!-- Rows will be dynamically inserted here -->
        </tbody>
    </table>

    <div id="loader">Loading more IPs...</div>

    <!-- Include day.js for relative time formatting -->
    <script src="https://cdn.jsdelivr.net/npm/dayjs@1/dayjs.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/dayjs@1/plugin/relativeTime.js"></script>
    <script>
        // Extend dayjs with the relativeTime plugin
        dayjs.extend(window.dayjs_plugin_relativeTime);

        // Variables for managing the state
        const tableBody = document.getElementById('ip-table-body');
        const loader = document.getElementById('loader');
        const currentlyShowingEl = document.getElementById('currently-showing');
        const searchInput = document.getElementById('search-input');

        let page = 1; // Start with the first page
        const limit = 50; // Fetch 50 IPs at a time
        let isLoading = false;
        let allIps = []; // Store all IPs loaded

        // Function to update relative times
        function updateRelativeTimes() {
            document.querySelectorAll('.relative-time').forEach(el => {
                if (!el.textContent) {
                    const date = el.getAttribute('data-date');
                    if (date) {
                        el.textContent = dayjs(date).fromNow();
                    }
                }
            });
        }

        // Fetch IPs from the API
        const fetchIps = async () => {
            if (isLoading) return;
            isLoading = true;
            loader.style.display = 'block';

            try {
                const response = await fetch(`/api/ips?page=${page}&limit=${limit}`);
                const newIps = await response.json();
                console.log("Fetched IPs:", newIps); // Debugging: Check if data is being fetched

                if (newIps.length > 0) {
                    // Append new IPs to the allIps array
                    allIps = [...allIps, ...newIps];
                    renderIps(allIps); // Re-render the table with all IPs
                    updateRelativeTimes(); // Update times for the new rows
                    page++;

                    // Update the currently showing count
                    currentlyShowingEl.textContent = allIps.length;

                } else {
                    window.removeEventListener('scroll', handleScroll);
                    loader.textContent = 'No more IPs to load.';
                }
            } catch (error) {
                console.error('Failed to fetch more IPs:', error);
                loader.textContent = 'Failed to load more IPs.';
            } finally {
                isLoading = false;
                loader.style.display = 'none';
            }
        };

        // Handle infinite scrolling to load more IPs
        const handleScroll = () => {
            if (window.innerHeight + window.scrollY >= document.body.offsetHeight - 100) {
                fetchIps();
            }
        };

        window.addEventListener('scroll', handleScroll);

        // Render IPs to the table
        const renderIps = (ips) => {
            tableBody.innerHTML = ''; // Clear the table body

            const fragment = document.createDocumentFragment();
            ips.forEach(ip => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${highlightSearchTerm(ip.ip)}</td>
                    <td>${new Date(ip.firstSeen).toLocaleString('en-GB', { timeZone: 'UTC' })}</td>
                    <td>${new Date(ip.lastSeen).toLocaleString('en-GB', { timeZone: 'UTC' })}</td>
                    <td class="relative-time" data-date="${ip.firstSeen}"></td>
                    <td class="relative-time" data-date="${ip.lastSeen}"></td>
                    <td>
                        <span class="${ip.isActive ? 'status-active' : 'status-inactive'}">
                            ${ip.isActive ? 'Active' : 'Inactive'}
                        </span>
                    </td>
                `;
                fragment.appendChild(row);
            });
            tableBody.appendChild(fragment);
        };

        // Highlight the search term in the IP addresses
        const highlightSearchTerm = (text) => {
            const searchTerm = searchInput.value.toLowerCase();
            if (searchTerm) {
                const regex = new RegExp(`(${searchTerm})`, 'gi');
                return text.replace(regex, '<span class="highlight">$1</span>');
            }
            return text;
        };

        // Filter IPs based on search input
        const filterIps = () => {
            const searchTerm = searchInput.value.toLowerCase();
            const filteredIps = allIps.filter(ip => ip.ip.toLowerCase().includes(searchTerm));
            renderIps(filteredIps); // Re-render with the filtered IPs
        };

        // Add an event listener for search input
        searchInput.addEventListener('input', filterIps);

        // Initial load of IPs when the page is ready
        document.addEventListener('DOMContentLoaded', fetchIps);
    </script>
</body>
</html>

