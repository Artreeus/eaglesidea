<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MISP Bulk Scan Dashboard</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; margin: 2em; background-color: #f4f6f9; color: #333; }
        h1 { color: #1a202c; }
        .container { max-width: 1200px; margin: 0 auto; }
        .dashboard { background-color: #fff; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); margin-bottom: 2em; }
        .controls { display: flex; align-items: center; gap: 15px; margin-bottom: 15px; }
        .controls button { background-color: #4a5568; color: white; border: none; padding: 10px 15px; border-radius: 5px; cursor: pointer; font-size: 1em; transition: background-color 0.2s; }
        .controls button:hover { background-color: #2d3748; }
        .controls button.reset { background-color: #c53030; }
        .controls button.reset:hover { background-color: #9b2c2c; }
        .progress-bar { width: 100%; background-color: #e2e8f0; border-radius: 5px; overflow: hidden; margin: 15px 0; height: 24px; }
        .progress-bar-fill { height: 100%; background-color: #4299e1; transition: width 0.5s ease-in-out; text-align: center; color: white; font-weight: bold; line-height: 24px; }
        .stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 15px; font-size: 1.1em; text-align: center; }
        .stats p { margin: 0; background-color: #edf2f7; padding: 10px; border-radius: 5px;}
        .stats span { font-weight: bold; display: block; margin-top: 5px; }
        table { width: 100%; border-collapse: collapse; background-color: #fff; box-shadow: 0 2px 4px rgba(0,0,0,0.1); border-radius: 8px; overflow: hidden; }
        th, td { border-bottom: 1px solid #e2e8f0; padding: 12px 15px; text-align: left; }
        th { background-color: #edf2f7; font-weight: 600; }
        .status-malicious { color: #c53030; font-weight: bold; }
        .status-clean { color: #2f855a; }
        .status-error { color: #b7791f; }
        .pagination { text-align: center; margin-top: 20px; }
        .pagination a, .pagination span { margin: 0 5px; text-decoration: none; padding: 8px 12px; border: 1px solid #cbd5e0; border-radius: 4px; color: #4a5568; }
        .pagination a.active, .pagination span.active { background-color: #4299e1; color: white; border-color: #4299e1; }
    </style>
</head>
<body>
    <div class="container">
        <h1>MISP Bulk Scan Dashboard</h1>

        <div class="dashboard">
            <h2>Scan Control & Progress</h2>
            <div class="controls">
                <button id="start-scan">‚ñ∂Ô∏è Start Scan</button>
                <button id="pause-scan">‚è∏Ô∏è Pause Scan</button>
                <button id="reset-scan" class="reset">üóëÔ∏è Reset All Scan Data</button>
            </div>
            <div class="progress-bar">
                <div id="progress-fill" class="progress-bar-fill">0%</div>
            </div>
            <div class="stats">
                <p>Status<span id="scan-status">Idle</span></p>
                <p>Progress<span id="progress-text">0 / 0</span></p>
                <p>Malicious<span id="malicious-count" class="status-malicious">0</span></p>
                <p>Clean<span id="clean-count" class="status-clean">0</span></p>
            </div>
        </div>

        <h2>Scan Results (Showing Malicious IPs)</h2>
        <table>
            <thead>
                <tr>
                    <th>IP Address</th>
                    <th>Status</th>
                    <th>Scanned At (UTC)</th>
                </tr>
            </thead>
            <tbody id="results-body">
               <!-- Dynamic results will be loaded here -->
            </tbody>
        </table>
        <div class="pagination" id="pagination-links">
            <!-- Dynamic pagination links will be loaded here -->
        </div>
    </div>

    <script>
        // --- DOM Element References ---
        const progressFill = document.getElementById('progress-fill');
        const progressText = document.getElementById('progress-text');
        const scanStatus = document.getElementById('scan-status');
        const maliciousCount = document.getElementById('malicious-count');
        const cleanCount = document.getElementById('clean-count');
        const resultsBody = document.getElementById('results-body');
        const paginationLinks = document.getElementById('pagination-links');
        
        // --- Control Button Event Listeners ---
        document.getElementById('start-scan').addEventListener('click', () => fetch('/api/misp-scan/start', { method: 'POST' }));
        document.getElementById('pause-scan').addEventListener('click', () => fetch('/api/misp-scan/pause', { method: 'POST' }));
        document.getElementById('reset-scan').addEventListener('click', () => {
            if (confirm('Are you sure you want to delete ALL previous scan results? This action cannot be undone.')) {
                fetch('/api/misp-scan/reset', { method: 'POST' }).then(() => location.reload());
            }
        });

        // --- Data Fetching and UI Update Functions ---
        async function updateStatus() {
            try {
                const response = await fetch('/api/misp-scan/status');
                const state = await response.json();

                const percentage = state.totalCount > 0 ? (state.processedCount / state.totalCount) * 100 : 0;
                
                progressFill.style.width = `${percentage.toFixed(2)}%`;
                progressFill.textContent = `${percentage.toFixed(1)}%`;
                progressText.textContent = `${state.processedCount.toLocaleString()} / ${state.totalCount.toLocaleString()}`;
                scanStatus.textContent = state.isRunning ? 'Running...' : 'Paused / Idle';
                maliciousCount.textContent = state.maliciousCount.toLocaleString();
                cleanCount.textContent = state.cleanCount.toLocaleString();
                
            } catch (error) {
                console.error('Failed to fetch scan status:', error);
                scanStatus.textContent = 'Error';
            }
        }

        async function loadResults(page = 1) {
            try {
                // By default, we only show malicious results as they are the most relevant.
                const response = await fetch(`/api/misp-results?page=${page}&limit=50&status=Malicious`);
                const data = await response.json();

                resultsBody.innerHTML = ''; // Clear previous results
                if (data.results.length === 0) {
                    resultsBody.innerHTML = '<tr><td colspan="3">No malicious IPs found yet.</td></tr>';
                } else {
                    data.results.forEach(res => {
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td>${res.ip}</td>
                            <td><span class="status-${res.status.toLowerCase()}">${res.status}</span></td>
                            <td>${new Date(res.scannedAt).toUTCString()}</td>
                        `;
                        resultsBody.appendChild(row);
                    });
                }
                renderPagination(data.currentPage, data.totalPages);
            } catch (error) {
                console.error('Failed to load results:', error);
                resultsBody.innerHTML = '<tr><td colspan="3">Error loading results.</td></tr>';
            }
        }
        
        function renderPagination(currentPage, totalPages) {
            paginationLinks.innerHTML = '';
            if (totalPages <= 1) return;

            for (let i = 1; i <= totalPages; i++) {
                const link = document.createElement('a');
                link.href = '#';
                link.textContent = i;
                if (i === currentPage) {
                    link.classList.add('active');
                }
                link.addEventListener('click', (e) => {
                    e.preventDefault();
                    loadResults(i);
                });
                paginationLinks.appendChild(link);
            }
        }
        
        // --- Initial Load and Polling Interval ---
        document.addEventListener('DOMContentLoaded', () => {
            updateStatus();
            loadResults();
            // Poll for status updates every 5 seconds to provide a live dashboard feel.
            setInterval(() => {
                updateStatus();
                // Optionally, reload results if the page is on the first page to show new findings live.
                const activePage = document.querySelector('.pagination a.active');
                if (!activePage || activePage.textContent === '1') {
                    loadResults(1);
                }
            }, 5000);
        });
    </script>
</body>
</html>
