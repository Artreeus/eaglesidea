<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MISP Scan Results</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }

        .modal-bg {
            background-color: rgba(0, 0, 0, 0.5);
        }

        .modal-content {
            max-height: 80vh;
        }
    </style>
</head>

<body class="bg-gray-100 text-gray-800">

    <div class="container mx-auto px-4 py-8">
        <header class="mb-8">
            <h1 class="text-4xl font-bold text-gray-900">MISP Intelligence Center</h1>
            <p class="text-lg text-gray-600 mt-2">Query the MISP database and review historical scan results.</p>
            <a href="/" class="text-blue-600 hover:underline mt-4 inline-block">&larr; Back to Main IP List</a>
        </header>

        <!-- Manual Scan Section -->
        <div class="bg-white p-6 rounded-lg shadow-md mb-8">
            <h2 class="text-2xl font-bold text-gray-800 mb-4">On-Demand Scan</h2>
            <p class="text-gray-600 mb-4">Enter one or more IPs (separated by new lines or commas) to scan them against
                MISP immediately.</p>
            <div id="manual-scan-form">
                <textarea id="ip-list-input"
                    class="w-full h-32 p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition"
                    placeholder="8.8.8.8, 1.1.1.1&#10;192.168.1.1"></textarea>
                <button id="manual-scan-btn"
                    class="mt-4 px-6 py-2 bg-blue-600 text-white font-semibold rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition w-full sm:w-auto">
                    Scan Now
                </button>
            </div>
            <div id="manual-results-container" class="mt-6 hidden">
                <h3 class="text-xl font-bold text-gray-800 mb-4">Scan Results</h3>
                <div id="manual-results-table" class="border border-gray-200 rounded-md overflow-hidden"></div>
            </div>
            <div id="manual-scan-loader" class="mt-6 hidden text-center">
                <p class="text-lg text-gray-600">Scanning... this may take a moment.</p>
            </div>
        </div>


        <!-- Historical Results Section -->
        <div class="bg-white rounded-lg shadow-md">
            <div class="p-4 border-b border-gray-200 flex flex-col sm:flex-row justify-between items-center gap-4">
                <h2 class="text-2xl font-bold text-gray-800">Historical Scan Log</h2>
                <div class="w-full sm:w-auto sm:max-w-xs">
                    <input type="text" id="search-input" placeholder="Search by IP address..."
                        class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition">
                </div>
            </div>
            <div class="overflow-x-auto">
                <table class="w-full text-left">
                    <thead class="bg-gray-50 border-b border-gray-200">
                        <tr>
                            <th class="px-6 py-3 text-sm font-semibold text-gray-600 uppercase tracking-wider">IP
                                Address</th>
                            <th class="px-6 py-3 text-sm font-semibold text-gray-600 uppercase tracking-wider">Scanned
                                On</th>
                            <th
                                class="px-6 py-3 text-sm font-semibold text-gray-600 uppercase tracking-wider text-center">
                                Status</th>
                            <th
                                class="px-6 py-3 text-sm font-semibold text-gray-600 uppercase tracking-wider text-center">
                                Details</th>
                        </tr>
                    </thead>
                    <tbody id="results-tbody" class="divide-y divide-gray-200">
                        <!-- Rows will be inserted here by JavaScript -->
                    </tbody>
                </table>
            </div>
            <div id="loader" class="text-center py-8 hidden">
                <p class="text-lg text-gray-600">Loading more results...</p>
            </div>
            <div id="no-more-results" class="text-center py-8 hidden">
                <p class="text-lg text-gray-500">End of results.</p>
            </div>
        </div>
    </div>

    <!-- Details Modal -->
    <div id="details-modal" class="fixed inset-0 modal-bg z-50 flex items-center justify-center p-4 hidden">
        <div class="bg-white rounded-lg shadow-xl w-full max-w-2xl">
            <div class="p-6 border-b border-gray-200 flex justify-between items-center">
                <h3 class="text-xl font-bold">MISP Attribute Details</h3>
                <button id="close-modal-btn"
                    class="text-gray-500 hover:text-gray-800 text-3xl leading-none">&times;</button>
            </div>
            <div class="p-6 modal-content overflow-y-auto">
                <pre class="bg-gray-900 text-white text-sm rounded-md p-4"><code id="modal-json-content"></code></pre>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // --- State Variables ---
            const tbody = document.getElementById('results-tbody');
            const loader = document.getElementById('loader');
            const noMoreResultsEl = document.getElementById('no-more-results');
            const searchInput = document.getElementById('search-input');
            let currentPage = 1;
            let isLoading = false;
            let totalPages = 1;
            let currentSearchTerm = '';

            const createRowHTML = (result) => {
                const attributes = result.response?.response?.Attribute || [];
                const found = attributes.length > 0;
                const statusClass = found ? 'bg-red-100 text-red-800' : 'bg-green-100 text-green-800';
                const statusText = found ? 'Threat Found' : 'Clean';

                return `
                    <tr class="hover:bg-gray-50">
                        <td class="px-6 py-4 whitespace-nowrap"><div class="text-base font-mono text-gray-900">${result.ip}</div></td>
                        <td class="px-6 py-4 whitespace-nowrap"><div class="text-base text-gray-700">${new Date(result.scannedAt).toLocaleString()}</div></td>
                        <td class="px-6 py-4 whitespace-nowrap text-center"><span class="px-3 py-1 inline-flex text-sm leading-5 font-semibold rounded-full ${statusClass}">${statusText}</span></td>
                        <td class="px-6 py-4 whitespace-nowrap text-center">
                            <button class="view-details-btn text-blue-600 hover:underline" data-details='${JSON.stringify(attributes)}'>View Details</button>
                        </td>
                    </tr>
                `;
            };

            const loadResults = async () => {
                if (isLoading || (currentPage > totalPages && totalPages !== 0)) {
                    if (currentPage > totalPages) noMoreResultsEl.classList.remove('hidden');
                    return;
                }
                isLoading = true;
                loader.classList.remove('hidden');
                noMoreResultsEl.classList.add('hidden');

                try {
                    const response = await fetch(`/api/misp-results?page=${currentPage}&searchTerm=${encodeURIComponent(currentSearchTerm)}`);
                    const data = await response.json();

                    if (data.results.length === 0 && currentPage === 1) {
                        tbody.innerHTML = '<tr><td colspan="4" class="text-center py-12 text-gray-500">No results found.</td></tr>';
                    } else {
                        data.results.forEach(result => {
                            tbody.innerHTML += createRowHTML(result);
                        });
                    }

                    totalPages = data.totalPages;
                    currentPage++;

                    if (currentPage > totalPages && tbody.children.length > 0) {
                        noMoreResultsEl.classList.remove('hidden');
                    }
                } catch (error) {
                    console.error("Failed to load results:", error);
                    tbody.innerHTML = '<tr><td colspan="4" class="text-center py-8 text-red-500">Failed to load results.</td></tr>';
                } finally {
                    isLoading = false;
                    loader.classList.add('hidden');
                }
            };

            // --- Debounce function to limit API calls while typing ---
            const debounce = (func, delay) => {
                let timeout;
                return (...args) => {
                    clearTimeout(timeout);
                    timeout = setTimeout(() => func.apply(this, args), delay);
                };
            };

            const handleSearch = () => {
                currentSearchTerm = searchInput.value;
                currentPage = 1;
                totalPages = 1; // Reset to allow fetching
                tbody.innerHTML = ''; // Clear previous results
                noMoreResultsEl.classList.add('hidden');
                loadResults();
            };

            searchInput.addEventListener('input', debounce(handleSearch, 500));

            window.addEventListener('scroll', () => {
                if (!isLoading && (window.innerHeight + window.scrollY) >= document.body.offsetHeight - 200) {
                    loadResults();
                }
            });

            loadResults(); // Initial load

            // --- Modal Logic ---
            const modal = document.getElementById('details-modal');
            const closeModalBtn = document.getElementById('close-modal-btn');
            const modalContent = document.getElementById('modal-json-content');

            document.body.addEventListener('click', (e) => {
                if (e.target.classList.contains('view-details-btn')) {
                    const details = JSON.parse(e.target.dataset.details);
                    modalContent.textContent = JSON.stringify(details, null, 2);
                    modal.classList.remove('hidden');
                }
            });

            closeModalBtn.addEventListener('click', () => modal.classList.add('hidden'));
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    modal.classList.add('hidden');
                }
            });

            // --- Manual Scan Logic ---
            const manualScanBtn = document.getElementById('manual-scan-btn');
            const ipListInput = document.getElementById('ip-list-input');
            const manualResultsContainer = document.getElementById('manual-results-container');
            const manualResultsTable = document.getElementById('manual-results-table');
            const manualScanLoader = document.getElementById('manual-scan-loader');

            manualScanBtn.addEventListener('click', async () => {
                const ipsText = ipListInput.value.trim();
                if (!ipsText) {
                    alert('Please enter at least one IP address.');
                    return;
                }

                const ips = ipsText.split(/[,\\s\\n]+/).filter(ip => ip);

                manualScanLoader.classList.remove('hidden');
                manualResultsContainer.classList.add('hidden');
                manualScanBtn.disabled = true;

                try {
                    const response = await fetch('/api/misp-scan/manual', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ ips })
                    });

                    if (!response.ok) {
                        const err = await response.json();
                        throw new Error(err.message || 'Manual scan failed.');
                    }

                    const results = await response.json();
                    displayManualResults(results, ips);

                } catch (error) {
                    console.error("Manual scan error:", error);
                    manualResultsTable.innerHTML = `<div class="p-4 text-red-600">${error.message}</div>`;
                } finally {
                    manualScanLoader.classList.add('hidden');
                    manualResultsContainer.classList.remove('hidden');
                    manualScanBtn.disabled = false;
                }
            });

            const displayManualResults = (results, submittedIps) => {
                let tableHTML = `
                    <table class="w-full text-left">
                        <thead class="bg-gray-50 border-b border-gray-200">
                            <tr>
                                <th class="px-6 py-3 text-sm font-semibold text-gray-600 uppercase tracking-wider">IP Address</th>
                                <th class="px-6 py-3 text-sm font-semibold text-gray-600 uppercase tracking-wider text-center">Status</th>
                                <th class="px-6 py-3 text-sm font-semibold text-gray-600 uppercase tracking-wider text-center">Details</th>
                            </tr>
                        </thead>
                        <tbody class="divide-y divide-gray-200">
                `;

                const resultsByIp = new Map(results.map(r => [r.ip, r]));

                submittedIps.forEach(ip => {
                    const result = resultsByIp.get(ip);
                    const attributes = result ? (result.response?.response?.Attribute || []) : [];
                    const found = attributes.length > 0;
                    const statusClass = found ? 'bg-red-100 text-red-800' : 'bg-green-100 text-green-800';
                    const statusText = found ? 'Threat Found' : 'Clean';
                    tableHTML += `
                        <tr class="hover:bg-gray-50">
                            <td class="px-6 py-4"><div class="text-base font-mono text-gray-900">${ip}</div></td>
                            <td class="px-6 py-4 text-center"><span class="px-3 py-1 text-sm font-semibold rounded-full ${statusClass}">${statusText}</span></td>
                            <td class="px-6 py-4 text-center"><button class="view-details-btn text-blue-600 hover:underline" data-details='${JSON.stringify(attributes)}'>View Details</button></td>
                        </tr>
                    `;
                });

                tableHTML += '</tbody></table>';
                manualResultsTable.innerHTML = tableHTML;
            };
        });
    </script>
</body>

</html>