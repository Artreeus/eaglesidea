<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MISP Intelligence Center</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f4f8;
        }
        .search-container {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 4rem 1rem;
            border-radius: 1rem;
            text-align: center;
            color: white;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        }
        .search-box {
            display: flex;
            align-items: center;
            max-width: 600px;
            margin: 1.5rem auto 0;
            background-color: rgba(255, 255, 255, 0.2);
            border-radius: 2rem;
            padding: 0.5rem;
            transition: all 0.3s ease;
        }
        .search-box:focus-within {
            background-color: rgba(255, 255, 255, 0.3);
            box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.5);
        }
        .search-box i {
            font-size: 1.5rem;
            margin: 0 1rem;
            color: #e0e0e0;
        }
        .search-box textarea {
            background: transparent;
            border: none;
            color: white;
            flex-grow: 1;
            font-size: 1.125rem;
            padding: 0.75rem 0;
            resize: none;
            outline: none;
            /* --- CSS Change --- */
            min-height: 50px; /* Set a minimum height */
            overflow-y: hidden; /* Hide the scrollbar */
        }
        .search-box textarea::placeholder {
            color: #d1d5db;
        }
        .scan-btn {
            background-color: #ffffff;
            color: #667eea;
            font-weight: 700;
            padding: 0.75rem 1.5rem;
            border-radius: 9999px;
            border: none;
            cursor: pointer;
            transition: all 0.2s ease;
            white-space: nowrap;
        }
        .scan-btn:hover {
            background-color: #f0f4f8;
        }
        .result-card {
            background-color: white;
            border-radius: 1rem;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.05);
            margin-top: 2rem;
            overflow: hidden;
        }
        .result-header {
            padding: 1.5rem;
            border-bottom: 1px solid #e5e7eb;
        }
        .result-header.threat {
            background-color: #fef2f2;
            color: #991b1b;
        }
        .result-header.clean {
            background-color: #f0fdf4;
            color: #166534;
        }
        .result-header-content {
            display: flex;
            align-items: center;
            gap: 1rem;
        }
        .result-header-content i {
            font-size: 2rem;
        }
        .result-title {
            font-size: 1.5rem;
            font-weight: 700;
        }
        .result-subtitle {
            font-size: 1rem;
            opacity: 0.8;
        }
        .threat-details {
            padding: 1.5rem;
        }
        .threat-item {
            border: 1px solid #e5e7eb;
            border-radius: 0.75rem;
            margin-bottom: 1rem;
            padding: 1rem;
            transition: all 0.2s ease;
        }
        .threat-item:hover {
            border-color: #667eea;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.1);
        }
        .threat-item h3 {
            font-size: 1.125rem;
            font-weight: 600;
            color: #1f2937;
            margin-bottom: 0.5rem;
        }
        .threat-info {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1rem;
            font-size: 0.875rem;
            color: #4b5563;
        }
        .threat-info div {
            background-color: #f9fafb;
            padding: 0.5rem 0.75rem;
            border-radius: 0.5rem;
            word-wrap: break-word;
        }
        .threat-info strong {
            font-weight: 600;
            color: #374151;
            margin-right: 0.5rem;
        }
        #loader {
            text-align: center;
            padding: 2rem;
        }
        #initial-state {
            text-align: center;
            padding: 4rem;
            color: #6b7280;
        }
        #initial-state i {
            font-size: 4rem;
            margin-bottom: 1rem;
            color: #9ca3af;
        }
    </style>
</head>
<body class="text-gray-800">

    <div class="container mx-auto px-4 py-8">

        <div class="search-container">
            <i class="fas fa-shield-alt" style="font-size: 3rem; margin-bottom: 1rem;"></i>
            <h1 class="text-4xl font-bold">MISP Intelligence Center</h1>
            <p class="text-lg opacity-90 mt-2">Enter one or more IPs (separated by new lines or commas) to scan them against the MISP database.</p>
            <div class="search-box">
                <i class="fas fa-search"></i>
                <textarea id="ip-list-input" placeholder="e.g., 8.8.8.8, 1.1.1.1" rows="1"></textarea>
                <button id="manual-scan-btn" class="scan-btn">Scan</button>
            </div>
        </div>

        <div id="results-area" class="mt-4">
            <div id="initial-state">
                <i class="fas fa-binoculars"></i>
                <h2 class="text-2xl font-bold">Waiting for your command</h2>
                <p class="text-lg mt-2">Your scan results will appear here.</p>
            </div>
            <div id="manual-scan-loader" class="hidden">
                 <div id="loader" class="text-center py-8">
                    <i class="fas fa-spinner fa-spin fa-3x text-blue-600"></i>
                    <p class="text-lg text-gray-600 mt-4">Scanning... this may take a moment.</p>
                </div>
            </div>
            <div id="manual-results-container"></div>
        </div>

    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const manualScanBtn = document.getElementById('manual-scan-btn');
            const ipListInput = document.getElementById('ip-list-input');
            const manualResultsContainer = document.getElementById('manual-results-container');
            const manualScanLoader = document.getElementById('manual-scan-loader');
            const initialState = document.getElementById('initial-state');

            // --- JavaScript Change: Auto-growing textarea logic ---
            ipListInput.addEventListener('input', () => {
                ipListInput.style.height = 'auto'; // Reset height
                ipListInput.style.height = (ipListInput.scrollHeight) + 'px'; // Set height to content height
            });

            const handleScan = async () => {
                const ipsText = ipListInput.value.trim();
                if (!ipsText) {
                    alert('Please enter at least one IP address.');
                    return;
                }

                const ips = ipsText.split(/[,\s\n]+/).filter(ip => ip);

                initialState.classList.add('hidden');
                manualScanLoader.classList.remove('hidden');
                manualResultsContainer.innerHTML = '';
                manualScanBtn.disabled = true;
                manualScanBtn.innerHTML = 'Scanning...';


                try {
                    const response = await fetch('/api/misp-scan/manual', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ ips })
                    });
                    
                    if (!response.ok) {
                         const err = await response.json();
                         throw new Error(err.message || 'The scan failed on the server.');
                    }
                    
                    const results = await response.json();
                    displayManualResults(results, ips);

                } catch (error) {
                    console.error("Manual scan error:", error);
                    manualResultsContainer.innerHTML = `<div class="p-4 my-4 text-center text-red-700 bg-red-100 rounded-lg">${error.message}</div>`;
                } finally {
                    manualScanLoader.classList.add('hidden');
                    manualScanBtn.disabled = false;
                    manualScanBtn.innerHTML = 'Scan';
                }
            };

            manualScanBtn.addEventListener('click', handleScan);
            ipListInput.addEventListener('keydown', (e) => {
                if (e.ctrlKey && e.key === 'Enter') {
                    handleScan();
                }
            });


            const displayManualResults = (results, submittedIps) => {
                let resultsHTML = '';
                const resultsByIp = new Map(results.map(r => [r.ip, r]));

                submittedIps.forEach(ip => {
                    const result = resultsByIp.get(ip);
                    const attributes = result ? (result.response?.response?.Attribute || []) : [];
                    const isThreat = attributes.length > 0;

                    if (isThreat) {
                        resultsHTML += createThreatCard(ip, attributes);
                    } else {
                        resultsHTML += createCleanCard(ip);
                    }
                });
                manualResultsContainer.innerHTML = resultsHTML;
            };

            const createCleanCard = (ip) => {
                return `
                    <div class="result-card">
                        <div class="result-header clean">
                            <div class="result-header-content">
                                <i class="fas fa-check-circle"></i>
                                <div>
                                    <h2 class="result-title">${ip}</h2>
                                    <p class="result-subtitle">Clean. No threats found in the MISP database.</p>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            };

            const createThreatCard = (ip, attributes) => {
                let threatItemsHTML = '';
                attributes.forEach(attr => {
                    threatItemsHTML += `
                        <div class="threat-item">
                            <h3>Event: ${attr.Event.info}</h3>
                            <div class="threat-info">
                               <div><strong>Category:</strong> ${attr.category}</div>
                               <div><strong>Type:</strong> ${attr.type}</div>
                               <div><strong>Event ID:</strong> ${attr.event_id}</div>
                               <div><strong>Timestamp:</strong> ${new Date(attr.timestamp * 1000).toLocaleString()}</div>
                               <div><strong>Comment:</strong> ${attr.comment || 'N/A'}</div>
                               <div><strong>UUID:</strong> ${attr.uuid}</div>
                            </div>
                        </div>
                    `;
                });

                return `
                    <div class="result-card">
                        <div class="result-header threat">
                            <div class="result-header-content">
                                <i class="fas fa-exclamation-triangle"></i>
                                <div>
                                    <h2 class="result-title">${ip}</h2>
                                    <p class="result-subtitle">${attributes.length} threat attribute(s) found.</p>
                                </div>
                            </div>
                        </div>
                        <div class="threat-details">
                            ${threatItemsHTML}
                        </div>
                    </div>
                `;
            };

        });
    </script>
</body>
</html>