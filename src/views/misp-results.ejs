<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MISP Scan Results</title>
    <script src="https://cdn.jsdelivr.net/npm/dayjs@1/dayjs.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/dayjs@1/plugin/relativeTime.js"></script>
    <style>
        :root {
            --primary-color: #3b82f6;
            --light-gray: #e5e7eb;
            --medium-gray: #9ca3af;
            --dark-gray: #374151;
            --background-color: #f9fafb;
            --white: #ffffff;
            --danger-color: #ef4444;
            --success-color: #22c55e;
            --border-radius: 8px;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            margin: 0;
            padding: 1.5em;
            background-color: var(--background-color);
            color: var(--dark-gray);
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
        }

        h1 {
            color: var(--dark-gray);
            font-size: 2em;
            margin-bottom: 0.5em;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5em;
            flex-wrap: wrap;
            gap: 1em;
        }

        #result-count {
            font-size: 1em;
            color: var(--medium-gray);
        }

        .search-container {
            position: relative;
            flex-grow: 1;
            min-width: 300px;
        }

        #search-input {
            width: 100%;
            padding: 12px 15px 12px 40px;
            border: 1px solid var(--light-gray);
            border-radius: var(--border-radius);
            font-size: 1em;
            box-sizing: border-box;
            transition: border-color 0.2s, box-shadow 0.2s;
        }

        #search-input:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2);
        }

        .search-container::before {
            content: 'üîç';
            position: absolute;
            left: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--medium-gray);
        }

        .add-new-container {
            background-color: var(--white);
            padding: 20px;
            border-radius: var(--border-radius);
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);
            margin-bottom: 1.5em;
        }

        .add-new-container h3 {
            margin-top: 0;
            margin-bottom: 15px;
        }

        #add-ip-form {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

        /* Span across all columns for the button */
        .form-group.full-width {
            grid-column: 1 / -1;
            display: flex;
            justify-content: flex-end;
        }

        #add-ip-form input {
            width: 100%;
            padding: 12px 15px;
            border: 1px solid var(--light-gray);
            border-radius: var(--border-radius);
            font-size: 1em;
            box-sizing: border-box;
        }

        #add-ip-form button {
            background-color: var(--primary-color);
            color: var(--white);
            border: none;
            padding: 12px 20px;
            font-size: 1em;
            font-weight: bold;
            border-radius: var(--border-radius);
            cursor: pointer;
            transition: background-color 0.2s;
        }

        #add-ip-form button:hover {
            background-color: #2563eb;
        }

        .form-status-message {
            margin-top: 10px;
            font-weight: bold;
            padding: 10px;
            border-radius: 6px;
            display: none;
            /* Hidden by default */
        }

        .form-status-message.success {
            display: block;
            color: #155724;
            background-color: #d4edda;
            border: 1px solid #c3e6cb;
        }

        .form-status-message.error {
            display: block;
            color: #721c24;
            background-color: #f8d7da;
            border: 1px solid #f5c6cb;
        }

        .table-container {
            position: relative;
            border: 1px solid var(--light-gray);
            border-radius: var(--border-radius);
            overflow: hidden;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);
        }

        #loader {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            font-weight: bold;
            z-index: 10;
            transition: opacity 0.3s;
            pointer-events: none;
            opacity: 0;
        }

        #loader.visible {
            opacity: 1;
            pointer-events: auto;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            background-color: var(--white);
        }

        th,
        td {
            border-bottom: 1px solid var(--light-gray);
            padding: 14px 18px;
            text-align: left;
            vertical-align: middle;
        }

        th {
            background-color: #f9fafb;
            font-weight: 600;
            font-size: 0.9em;
            color: #6b7280;
        }

        tr:last-child td {
            border-bottom: none;
        }

        tr:hover {
            background-color: #f3f4f6;
        }

        .status-found {
            color: var(--danger-color);
            font-weight: bold;
        }

        .status-not-found {
            color: var(--success-color);
        }

        .ip-address {
            font-family: 'Courier New', Courier, monospace;
            font-weight: bold;
            font-size: 1.1em;
        }

        .view-details-btn {
            background-color: transparent;
            color: var(--primary-color);
            border: none;
            padding: 5px;
            font-weight: bold;
            cursor: pointer;
            border-radius: 4px;
        }

        .view-details-btn:hover {
            text-decoration: underline;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.6);
            justify-content: center;
            align-items: center;
        }

        .modal-content {
            background-color: white;
            padding: 25px;
            border-radius: var(--border-radius);
            max-width: 800px;
            width: 90%;
            position: relative;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -4px rgba(0, 0, 0, 0.1);
        }

        .close {
            position: absolute;
            top: 10px;
            right: 20px;
            font-size: 1.8em;
            color: var(--medium-gray);
            cursor: pointer;
            font-weight: bold;
        }

        .close:hover {
            color: var(--dark-gray);
        }

        #modal-details-content {
            background-color: #f3f4f6;
            padding: 15px;
            border-radius: 6px;
            white-space: pre-wrap;
            word-wrap: break-word;
            max-height: 60vh;
            overflow-y: auto;
        }

        #pagination-controls {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 25px 0;
            gap: 8px;
        }

        .pagination-btn {
            background-color: var(--white);
            border: 1px solid var(--light-gray);
            color: var(--dark-gray);
            padding: 8px 14px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.9em;
            transition: background-color 0.2s, border-color 0.2s;
        }

        .pagination-btn:hover {
            background-color: #f3f4f6;
            border-color: #d1d5db;
        }

        .pagination-btn:disabled {
            color: var(--medium-gray);
            cursor: not-allowed;
            background-color: var(--background-color);
        }

        .pagination-btn.active {
            background-color: var(--primary-color);
            color: var(--white);
            border-color: var(--primary-color);
        }

        .pagination-ellipsis {
            padding: 8px 0;
            color: var(--medium-gray);
        }
    </style>
</head>

<body>
    <div class="container">
        <h1>MISP Scan Results</h1>
        <div class="header">
            <div id="result-count">Calculating...</div>
            <div class="search-container">
                <input type="text" id="search-input" placeholder="Search by IP address..." />
            </div>
        </div>

        <div class="add-new-container">
            <h3>Add New / Update IP with Details</h3>
            <form id="add-ip-form">
                <div class="form-group">
                    <input type="text" id="new-ip-input" placeholder="IP Address*" required>
                </div>
                <div class="form-group">
                    <input type="text" id="new-event-info-input" placeholder="Event Info">
                </div>
                <div class="form-group">
                    <input type="text" id="new-category-input" placeholder="Category">
                </div>
                <div class="form-group">
                    <input type="text" id="new-type-input" placeholder="Type">
                </div>
                <div class="form-group full-width">
                    <button type="submit">Add to Database</button>
                </div>
            </form>
            <div id="form-message" class="form-status-message"></div>
        </div>

        <div class="table-container">
            <div id="loader">Loading...</div>
            <table id="misp-table">
                <thead>
                    <tr>
                        <th>IP Address</th>
                        <th>Status</th>
                        <th>Event Info</th>
                        <th>Category / Type</th>
                        <th>Last Seen in MISP</th>
                        <th>Details</th>
                    </tr>
                </thead>
                <tbody id="misp-table-body"></tbody>
            </table>
        </div>

        <div id="pagination-controls"></div>

        <div id="details-modal" class="modal">
            <div class="modal-content">
                <span class="close">&times;</span>
                <h2>Details for IP: <span id="modal-ip" class="ip-address"></span></h2>
                <pre id="modal-details-content"></pre>
            </div>
        </div>
    </div>

    <script>
        // --- SETUP & STATE ---
        dayjs.extend(window.dayjs_plugin_relativeTime);

        const tableBody = document.getElementById('misp-table-body');
        const searchInput = document.getElementById('search-input');
        const paginationControls = document.getElementById('pagination-controls');
        const loader = document.getElementById('loader');

        // Form elements
        const addIpForm = document.getElementById('add-ip-form');
        const newIpInput = document.getElementById('new-ip-input');
        const newEventInfoInput = document.getElementById('new-event-info-input');
        const newCategoryInput = document.getElementById('new-category-input');
        const newTypeInput = document.getElementById('new-type-input');
        const formMessage = document.getElementById('form-message');

        let currentPage = 1;
        const limit = 25;
        let totalResults = 0;
        let totalPages = 0;
        let currentSearchTerm = '';
        let debounceTimer;

        // --- MODAL LOGIC ---
        const modal = document.getElementById('details-modal');
        const closeModalBtn = document.querySelector('.close');
        const modalIp = document.getElementById('modal-ip');
        const modalDetailsContent = document.getElementById('modal-details-content');

        closeModalBtn.onclick = () => modal.style.display = 'none';
        window.onclick = (event) => {
            if (event.target === modal) modal.style.display = 'none';
        };
        const showModal = (result) => {
            modalIp.textContent = result.ip;
            modalDetailsContent.textContent = JSON.stringify(result.response?.response || result, null, 2);
            modal.style.display = 'flex';
        };

        // --- DATA FETCHING & SAVING ---
        const fetchResults = async (page = 1, searchTerm = '') => {
            loader.classList.add('visible');
            try {
                const url = `/api/misp-results?page=${page}&limit=${limit}&searchTerm=${encodeURIComponent(searchTerm)}`;
                const response = await fetch(url);
                if (!response.ok) throw new Error(`API Error: ${response.statusText}`);
                const data = await response.json();
                totalResults = data.total;
                totalPages = data.totalPages;
                currentPage = data.currentPage;
                currentSearchTerm = searchTerm;
                renderResults(data.results);
                renderPagination();
                updateResultCount(data.results.length);
            } catch (error) {
                console.error('Failed to fetch results:', error);
                tableBody.innerHTML = `<tr><td colspan="6" style="text-align:center; color: var(--danger-color); padding: 40px;">Failed to load results. See console for details.</td></tr>`;
            } finally {
                loader.classList.remove('visible');
            }
        };

        const handleFormSubmit = async (event) => {
            event.preventDefault();
            const ipToAdd = newIpInput.value.trim();
            const eventInfo = newEventInfoInput.value.trim();
            const category = newCategoryInput.value.trim();
            const type = newTypeInput.value.trim();

            if (!ipToAdd) return;

            formMessage.textContent = 'Submitting...';
            formMessage.className = 'form-status-message';
            formMessage.style.display = 'block';

            // Create a payload that mimics the structure of a real MISP attribute
            const currentTime = String(Math.floor(Date.now() / 1000));
            const newAttribute = {
                value: ipToAdd,
                event_id: 'manual',
                category: category || 'External analysis',
                type: type || 'ip-dst',
                comment: 'Manually added entry.',
                timestamp: currentTime,
                last_seen: currentTime,
                Event: {
                    info: eventInfo || `Manual entry for ${ipToAdd}`
                }
            };

            const payload = {
                results: [{
                    ip: ipToAdd,
                    response: {
                        response: {
                            Attribute: [newAttribute]
                        }
                    }
                }]
            };

            try {
                const response = await fetch('/api/misp-results/upload', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(payload)
                });
                const result = await response.json();
                if (!response.ok) throw new Error(result.message || 'Failed to save IP.');

                formMessage.textContent = result.message || 'Successfully added IP!';
                formMessage.className = 'form-status-message success';
                addIpForm.reset();
                fetchResults(1, ''); // Refresh table to page 1

            } catch (error) {
                console.error('Submission Error:', error);
                formMessage.textContent = error.message;
                formMessage.className = 'form-status-message error';
            }

            // Hide the message after a few seconds
            setTimeout(() => {
                formMessage.style.display = 'none';
            }, 5000);
        };

        // --- UI RENDERING ---
        const renderResults = (results) => {
            tableBody.innerHTML = '';
            if (results.length === 0) {
                tableBody.innerHTML = `<tr><td colspan="6" style="text-align:center; padding: 40px;">No results found.</td></tr>`;
                return;
            }
            const fragment = document.createDocumentFragment();
            results.forEach(result => {
                const attributes = result.response?.response?.Attribute || [];
                const hasMatch = attributes.length > 0;
                const firstAttr = hasMatch ? attributes[0] : {};
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td class="ip-address">${result.ip}</td>
                    <td>
                        <span class="${hasMatch ? 'status-found' : 'status-not-found'}">
                            ${hasMatch ? `Found (${attributes.length})` : 'Not Found'}
                        </span>
                    </td>
                    <td>${hasMatch ? (firstAttr.Event?.info || 'N/A') : 'N/A'}</td>
                    <td>${hasMatch ? `${firstAttr.category || 'N/A'} / ${firstAttr.type || 'N/A'}` : 'N/A'}</td>
                    <td>
                        ${hasMatch && firstAttr.last_seen ? `<span title="${new Date(parseInt(firstAttr.last_seen) * 1000).toUTCString()}">${dayjs(parseInt(firstAttr.last_seen) * 1000).fromNow()}</span>` : 'N/A'}
                    </td>
                    <td><button class="view-details-btn">View JSON</button></td>
                `;
                row.querySelector('.view-details-btn').addEventListener('click', () => showModal(result));
                fragment.appendChild(row);
            });
            tableBody.appendChild(fragment);
        };

        const renderPagination = () => {
            paginationControls.innerHTML = '';
            if (totalPages <= 1) return;

            const createButton = (text, page, isDisabled = false, isActive = false, isEllipsis = false) => {
                if (isEllipsis) {
                    const span = document.createElement('span');
                    span.className = 'pagination-ellipsis';
                    span.textContent = '...';
                    return span;
                }
                const button = document.createElement('button');
                button.textContent = text;
                button.className = 'pagination-btn';
                if (isActive) button.classList.add('active');
                button.disabled = isDisabled;
                button.addEventListener('click', () => {
                    if (!isDisabled) fetchResults(page, currentSearchTerm);
                });
                return button;
            };

            paginationControls.appendChild(createButton('‚Äπ Prev', currentPage - 1, currentPage === 1));

            const pagesToShow = [];
            if (totalPages <= 7) {
                for (let i = 1; i <= totalPages; i++) pagesToShow.push(i);
            } else {
                pagesToShow.push(1);
                if (currentPage > 3) pagesToShow.push('...');
                const start = Math.max(2, currentPage - 1);
                const end = Math.min(totalPages - 1, currentPage + 1);
                for (let i = start; i <= end; i++) pagesToShow.push(i);
                if (currentPage < totalPages - 2) pagesToShow.push('...');
                pagesToShow.push(totalPages);
            }

            pagesToShow.forEach(p => {
                if (typeof p === 'number') {
                    paginationControls.appendChild(createButton(p, p, false, p === currentPage));
                } else {
                    paginationControls.appendChild(createButton(null, null, true, false, true));
                }
            });

            paginationControls.appendChild(createButton('Next ‚Ä∫', currentPage + 1, currentPage === totalPages));
        };

        const updateResultCount = (currentCount) => {
            const from = totalResults === 0 ? 0 : (currentPage - 1) * limit + 1;
            const to = from + currentCount - 1;
            document.getElementById('result-count').textContent = `Showing ${from}‚Äì${to} of ${totalResults.toLocaleString()} results`;
        };

        // --- EVENT LISTENERS ---
        searchInput.addEventListener('input', (event) => {
            const searchTerm = event.target.value.trim();
            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(() => {
                fetchResults(1, searchTerm);
            }, 350);
        });

        addIpForm.addEventListener('submit', handleFormSubmit);

        // --- INITIAL LOAD ---
        document.addEventListener('DOMContentLoaded', () => {
            fetchResults(currentPage, currentSearchTerm);
        });
    </script>
</body>

</html>